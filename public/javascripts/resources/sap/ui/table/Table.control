<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<control xmlns="http://www.sap.com/sap.ui.library.xsd">
    <name>Table</name>
    <derived/>
    <documentation>&lt;p&gt;
    Provides a comprehensive set of features for displaying and dealing with vast amounts of data. The Table control supports
    desktop PCs and tablet devices. On tablets, special consideration should be given to the number of visible columns
    and rows due to the limited performance of some devices.
&lt;/p&gt;
&lt;p&gt;
    In order to keep the document DOM as lean as possible, the Table control reuses its DOM elements of the rows.
    When the user scrolls, only the row contexts are changed but the rendered controls remain the same. This allows
    the Table control to handle huge amounts of data. Nevertheless, restrictions apply regarding the number of displayed
    columns. Keep the number as low as possible to improve performance. Due to the nature of tables, the used
    control for column templates also has a big influence on the performance.
&lt;/p&gt;
&lt;p&gt;
    The Table control relies completely on data binding, and its supported feature set is tightly coupled to
    the data model and binding being used.
&lt;/p&gt;</documentation>
    <baseType>sap.ui.core/Control</baseType>
    <properties>
        <property group="Dimension" defaultValue="auto" type="sap.ui.core/CSSSize" name="width">
            <documentation>Width of the Table.</documentation>
        </property>
        <property group="Appearance" type="sap.ui.core/int" name="rowHeight">
            <documentation>Height of a row of the Table in pixel.</documentation>
        </property>
        <property group="Appearance" type="sap.ui.core/int" name="columnHeaderHeight">
            <documentation>Height of the column header of the Table in pixel.</documentation>
        </property>
        <property group="Appearance" defaultValue="true" type="sap.ui.core/boolean" name="columnHeaderVisible">
            <documentation>Flag whether the column header is visible or not.</documentation>
        </property>
        <property group="Appearance" defaultValue="10" type="sap.ui.core/int" name="visibleRowCount">
            <documentation>Number of visible rows of the table.</documentation>
        </property>
        <property group="Appearance" defaultValue="0" type="sap.ui.core/int" name="firstVisibleRow">
            <documentation>First visible row.</documentation>
        </property>
        <property group="Behavior" defaultValue="MultiToggle" type="sap.ui.table/SelectionMode" name="selectionMode">
            <documentation>Selection mode of the Table. This property controls whether single or multiple rows can be selected and
how the selection can be extended. It may also influence the visual appearance.</documentation>
        </property>
        <property group="Behavior" defaultValue="RowSelector" type="sap.ui.table/SelectionBehavior" name="selectionBehavior">
            <documentation>Selection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both
can be clicked to select a row.</documentation>
        </property>
        <property group="Appearance" defaultValue="-1" type="sap.ui.core/int" name="selectedIndex">
            <documentation>Zero-based index of selected item. Index value for no selection is -1.
When multi-selection is enabled and multiple items are selected, the method returns
the lead selected item. Sets the zero-based index of the currently selected item. This method
removes any previous selections. When the given index is invalid, the call is ignored.</documentation>
        </property>
        <property group="Behavior" defaultValue="true" type="sap.ui.core/boolean" name="editable">
            <documentation>Flag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)</documentation>
        </property>
        <property group="Behavior" defaultValue="Scrollbar" type="sap.ui.table/NavigationMode" name="navigationMode">
            <documentation>Determines whether a scrollbar or a paginator is used for navigation inside the table.
If the paginator mode is used, it requires the &lt;code&gt;sap.ui.commons&lt;/code&gt; library.

This renders a scrollbar as a navigation element. Data fetched from an OData service is still
loaded page-wise no matter which visual representation is used for navigation inside the table.</documentation>
            <deprecation since="1.38">there is no replacement, since &lt;code&gt;Scrollbar&lt;/code&gt; is the only supported option</deprecation>
        </property>
        <property group="Appearance" defaultValue="100" type="sap.ui.core/int" name="threshold">
            <documentation>The &lt;code&gt;threshold&lt;/code&gt; defines how many additional (not yet visible records) shall be pre-fetched to enable smooth
scrolling. The threshold is always added to the &lt;code&gt;visibleRowCount&lt;/code&gt;. If the &lt;code&gt;visibleRowCount&lt;/code&gt; is 10 and the
&lt;code&gt;threshold&lt;/code&gt; is 100, there will be 110 records fetched with the initial load.
If the &lt;code&gt;threshold&lt;/code&gt; is lower than the &lt;code&gt;visibleRowCount&lt;/code&gt;, the &lt;code&gt;visibleRowCount&lt;/code&gt; will be used as
the &lt;code&gt;threshold&lt;/code&gt;. If the value is 0 then the thresholding is disabled.</documentation>
        </property>
        <property group="Behavior" defaultValue="true" type="sap.ui.core/boolean" name="enableColumnReordering">
            <documentation>Flag to enable or disable column reordering</documentation>
        </property>
        <property group="Behavior" defaultValue="false" type="sap.ui.core/boolean" name="enableGrouping">
            <documentation>Flag to enable or disable column grouping. (experimental!)</documentation>
        </property>
        <property group="Appearance" defaultValue="false" type="sap.ui.core/boolean" name="showColumnVisibilityMenu">
            <documentation>Flag to show or hide the column visibility menu. This menu will get displayed in each
generated column header menu. It allows to show or hide columns</documentation>
        </property>
        <property group="Appearance" defaultValue="true" type="sap.ui.core/boolean" name="showNoData">
            <documentation>Flag whether to show the no data overlay or not once the table is empty. If set to false
the table will just show a grid of empty cells</documentation>
        </property>
        <property since="1.9.2" group="Appearance" defaultValue="Fixed" type="sap.ui.table/VisibleRowCountMode" name="visibleRowCountMode">
            <documentation>This defines how the table handles the visible rows in the table. The default behavior is,
that a fixed row count is defined. If you change it to auto the visibleRowCount property is
changed by the table automatically. It will then adjust its maximum row count to the space it is
allowed to cover (limited by the surrounding container) and its minimum row count to the value of
the property minAutoRowCount (default value : 5) In manual mode the user can change
the visibleRowCount interactively.</documentation>
        </property>
        <property group="Appearance" defaultValue="5" type="sap.ui.core/int" name="minAutoRowCount">
            <documentation>This property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive.
For any other visibleRowCountMode, it is ignored.</documentation>
        </property>
        <property group="Appearance" defaultValue="0" type="sap.ui.core/int" name="fixedColumnCount">
            <documentation>Number of columns that are fix on the left. When you use a horizontal scroll bar, only
the columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work.
Please note that the aggregated width of all fixed columns must not exceed the table width since there
will be no scrollbar for fixed columns.</documentation>
        </property>
        <property group="Appearance" defaultValue="0" type="sap.ui.core/int" name="fixedRowCount">
            <documentation>Number of rows that are fix on the top. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.</documentation>
        </property>
        <property since="1.18.7" group="Appearance" defaultValue="0" type="sap.ui.core/int" name="fixedBottomRowCount">
            <documentation>Number of rows that are fix on the bottom. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.</documentation>
        </property>
        <property since="1.21.0" group="Behavior" defaultValue="false" type="sap.ui.core/boolean" name="enableColumnFreeze">
            <documentation>Flag whether to show or hide the column menu item to freeze or unfreeze a column.</documentation>
        </property>
        <property since="1.21.0" group="Behavior" defaultValue="false" type="sap.ui.core/boolean" name="enableCellFilter">
            <documentation>Flag whether to enable or disable the context menu on cells to trigger a filtering with the cell value.</documentation>
        </property>
        <property since="1.21.2" group="Appearance" defaultValue="false" type="sap.ui.core/boolean" name="showOverlay">
            <documentation>Setting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.</documentation>
        </property>
        <property since="1.23.0" group="Behavior" defaultValue="true" type="sap.ui.core/boolean" name="enableSelectAll">
            <documentation>Specifies if a select all button should be displayed in the top left corner. This button is only displayed
if the row selector is visible and the selection mode is set to any kind of multi selection.</documentation>
        </property>
        <property since="1.23.0" group="Behavior" defaultValue="false" type="sap.ui.core/boolean" name="enableCustomFilter">
            <documentation>Set this parameter to true to implement your own filter behaviour. Instead of the filter input box a button
will be rendered for which' press event (customFilter) you can register an event handler.</documentation>
        </property>
        <property since="1.27.0" group="Behavior" defaultValue="false" type="sap.ui.core/boolean" name="enableBusyIndicator">
            <documentation>Set this parameter to true to make the table handle the busy indicator by its own.
The table will switch to busy as soon as it scrolls into an unpaged area. This feature can only
be used when the navigation mode is set to scrolling.</documentation>
        </property>
    </properties>
    <events>
        <event allowPreventDefault="false" name="rowSelectionChange">
            <documentation>fired when the row selection of the table has been changed (the event parameters can be used to determine
selection changes - to find out the selected rows you should better use the table selection API)</documentation>
            <parameters>
                <parameter type="sap.ui.core/int" name="rowIndex">
                    <documentation>row index which has been clicked so that the selection has been changed (either selected or deselected)</documentation>
                </parameter>
                <parameter type="sap.ui.core/object" name="rowContext">
                    <documentation>binding context of the row which has been clicked so that selection has been changed</documentation>
                </parameter>
                <parameter type="sap.ui.core/int[]" name="rowIndices">
                    <documentation>array of row indices which selection has been changed (either selected or deselected)</documentation>
                </parameter>
                <parameter type="sap.ui.core/boolean" name="selectAll">
                    <documentation>indicator if &quot;select all&quot; function is used to select rows</documentation>
                </parameter>
                <parameter type="sap.ui.core/boolean" name="userInteraction">
                    <documentation>indicates that the event was fired due to an explicit user interaction like clicking the row header
or using the keyboard (SPACE or ENTER) to select a row or a range of rows.</documentation>
                </parameter>
            </parameters>
        </event>
        <event allowPreventDefault="true" name="columnSelect">
            <documentation>fired when a column of the table has been selected</documentation>
            <parameters>
                <parameter type="sap.ui.table/Column" name="column">
                    <documentation>reference to the selected column</documentation>
                </parameter>
            </parameters>
        </event>
        <event allowPreventDefault="true" name="columnResize">
            <documentation>fired when a table column is resized.</documentation>
            <parameters>
                <parameter type="sap.ui.table/Column" name="column">
                    <documentation>resized column.</documentation>
                </parameter>
                <parameter type="sap.ui.core/CSSSize" name="width">
                    <documentation>new width of the table column as CSS Size definition.</documentation>
                </parameter>
            </parameters>
        </event>
        <event allowPreventDefault="true" name="columnMove">
            <documentation>fired when a table column is moved.</documentation>
            <parameters>
                <parameter type="sap.ui.table/Column" name="column">
                    <documentation>moved column.</documentation>
                </parameter>
                <parameter type="sap.ui.core/int" name="newPos">
                    <documentation>new position of the column.</documentation>
                </parameter>
            </parameters>
        </event>
        <event allowPreventDefault="true" name="sort">
            <documentation>fired when the table is sorted.</documentation>
            <parameters>
                <parameter type="sap.ui.table/Column" name="column">
                    <documentation>sorted column.</documentation>
                </parameter>
                <parameter type="sap.ui.table/SortOrder" name="sortOrder">
                    <documentation>Sort Order</documentation>
                </parameter>
                <parameter type="sap.ui.core/boolean" name="columnAdded">
                    <documentation>If column was added to sorter this is true. If new sort is started this is set to false</documentation>
                </parameter>
            </parameters>
        </event>
        <event allowPreventDefault="true" name="filter">
            <documentation>fired when the table is filtered.</documentation>
            <parameters>
                <parameter type="sap.ui.table/Column" name="column">
                    <documentation>filtered column.</documentation>
                </parameter>
                <parameter type="sap.ui.core/string" name="value">
                    <documentation>filter value.</documentation>
                </parameter>
            </parameters>
        </event>
        <event allowPreventDefault="true" name="group">
            <documentation>fired when the table is grouped (experimental!).</documentation>
            <parameters>
                <parameter type="sap.ui.table/Column" name="column">
                    <documentation>grouped column.</documentation>
                </parameter>
            </parameters>
        </event>
        <event allowPreventDefault="true" name="columnVisibility">
            <documentation>fired when the visibility of a table column is changed.</documentation>
            <parameters>
                <parameter type="sap.ui.table/Column" name="column">
                    <documentation>affected column.</documentation>
                </parameter>
                <parameter type="sap.ui.core/boolean" name="visible">
                    <documentation>new value of the visible property.</documentation>
                </parameter>
            </parameters>
        </event>
        <event allowPreventDefault="true" since="1.21.0" name="cellClick">
            <documentation>fired when the user clicks a cell of the table (experimental!).</documentation>
            <parameters>
                <parameter type="sap.ui.core/Control" name="cellControl">
                    <documentation>The control of the cell.</documentation>
                </parameter>
                <parameter type="any" name="cellDomRef">
                    <documentation>DOM reference of the clicked cell. Can be used to position the context menu.</documentation>
                </parameter>
                <parameter type="sap.ui.core/int" name="rowIndex">
                    <documentation>Row index of the selected cell.</documentation>
                </parameter>
                <parameter type="sap.ui.core/int" name="columnIndex">
                    <documentation>Column index of the selected cell. This is the index of visible columns and might differ from
the index maintained in the column aggregation.</documentation>
                </parameter>
                <parameter type="sap.ui.core/string" name="columnId">
                    <documentation>Column ID of the selected cell.</documentation>
                </parameter>
                <parameter type="any" name="rowBindingContext">
                    <documentation>Row binding context of the selected cell.</documentation>
                </parameter>
            </parameters>
        </event>
        <event allowPreventDefault="true" since="1.21.0" name="cellContextmenu">
            <documentation>fired when the user clicks a cell of the table.</documentation>
            <parameters>
                <parameter type="sap.ui.core/Control" name="cellControl">
                    <documentation>The control of the cell.</documentation>
                </parameter>
                <parameter type="any" name="cellDomRef">
                    <documentation>DOM reference of the clicked cell. Can be used to position the context menu.</documentation>
                </parameter>
                <parameter type="sap.ui.core/int" name="rowIndex">
                    <documentation>Row index of the selected cell.</documentation>
                </parameter>
                <parameter type="sap.ui.core/int" name="columnIndex">
                    <documentation>Column index of the selected cell. This is the index of visible columns and might differ from
the index maintained in the column aggregation.</documentation>
                </parameter>
                <parameter type="sap.ui.core/string" name="columnId">
                    <documentation>Column ID of the selected cell.</documentation>
                </parameter>
                <parameter type="any" name="rowBindingContext">
                    <documentation>Row binding context of the selected cell.</documentation>
                </parameter>
            </parameters>
        </event>
        <event allowPreventDefault="true" since="1.21.0" name="columnFreeze">
            <documentation>fired when a column of the table should be freezed</documentation>
            <parameters>
                <parameter type="sap.ui.table/Column" name="column">
                    <documentation>reference to the column to freeze</documentation>
                </parameter>
            </parameters>
        </event>
        <event allowPreventDefault="false" since="1.23.0" name="customFilter">
            <documentation>This event is triggered when the custom filter item of the column menu is pressed. The column on which the event was triggered is passed as parameter.</documentation>
        </event>
        <event allowPreventDefault="false" since="1.37.0" name="firstVisibleRowChanged">
            <documentation>This event gets fired when the first visible row is changed. It should only be used by composite controls.
The event even is fired when setFirstVisibleRow is called programmatically.</documentation>
        </event>
        <event allowPreventDefault="false" since="1.37.0" name="busyStateChanged">
            <documentation>This event gets fired when the busy state of the table changes. It should only be used by composite controls.</documentation>
        </event>
    </events>
    <aggregations default="columns">
        <aggregation cardinality="0..1" type="sap.ui.core/Control" name="title">
            <documentation>Control or text of title section of the Table (if not set it will be hidden)</documentation>
        </aggregation>
        <aggregation cardinality="0..1" type="sap.ui.core/Control" name="footer">
            <documentation>Control or text of footer section of the Table (if not set it will be hidden)</documentation>
        </aggregation>
        <aggregation cardinality="0..1" type="sap.ui.core/Toolbar" name="toolbar">
            <documentation>Toolbar of the Table (if not set it will be hidden)</documentation>
            <deprecation since="1.38">This aggregation is deprecated, use the &lt;code&gt;extension&lt;code&gt; aggregation instead.</deprecation>
        </aggregation>
        <aggregation cardinality="0..n" type="sap.ui.core/Control" name="extension">
            <documentation>Extension section of the Table (if not set it will be hidden)</documentation>
        </aggregation>
        <aggregation bindable="bindable" cardinality="0..n" type="sap.ui.table/Column" name="columns">
            <documentation>Columns of the Table</documentation>
        </aggregation>
        <aggregation bindable="bindable" cardinality="0..n" type="sap.ui.table/Row" name="rows">
            <documentation>Rows of the Table</documentation>
        </aggregation>
        <aggregation cardinality="0..1" type="sap.ui.core/Control" name="noData">
            <documentation>The value for the noData aggregation can be either a string value or a control instance.
The control is shown, in case there is no data for the Table available. In case of a string
value this will simply replace the no data text.</documentation>
        </aggregation>
    </aggregations>
    <associations>
        <association cardinality="0..1" type="sap.ui.table/Column" name="groupBy">
            <documentation>Group By Column (experimental!)</documentation>
        </association>
        <association cardinality="0..n" type="sap.ui.core/Control" name="ariaLabelledBy">
            <documentation>Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).</documentation>
        </association>
    </associations>
    <methods>
        <method name="getSortedColumns">
            <documentation>Gets sorted columns.</documentation>
        </method>
        <method type="sap.ui.table/Table" name="sort">
            <documentation>Sorts the given column ascending or descending.</documentation>
            <parameters>
                <parameter type="sap.ui.table/Column" name="column">
                    <documentation>column to be sorted</documentation>
                </parameter>
                <parameter type="sap.ui.table/SortOrder" name="sortOrder">
                    <documentation>sort order of the column (if undefined the default will be ascending)</documentation>
                </parameter>
                <parameter type="any" name="add">
                    <documentation>Set to true to add the new sort criterion to the existing sort criteria</documentation>
                </parameter>
            </parameters>
        </method>
        <method type="sap.ui.table/Table" name="filter">
            <documentation>Filter the given column by the given value.</documentation>
            <parameters>
                <parameter type="sap.ui.table/Column" name="column">
                    <documentation>column to be filtered</documentation>
                </parameter>
                <parameter type="sap.ui.core/string" name="value">
                    <documentation>filter value as string (will be converted)</documentation>
                </parameter>
            </parameters>
        </method>
        <method type="sap.ui.core/object" name="getContextByIndex">
            <documentation>Returns the context of a row by its index. Please note that for server-based models like OData,
the supplied index might not have been loaded yet. If the context is not available at the client,
the binding will trigger a backend request and request this single context. Although this API
looks synchronous it may not return a context but load it and fire a change event on the binding.

For server-based models you should consider to only make this API call when the index is within
the currently visible scroll area.</documentation>
            <parameters>
                <parameter type="sap.ui.core/int" name="index">
                    <documentation>Index of the row to return the context from.</documentation>
                </parameter>
            </parameters>
        </method>
        <method type="sap.ui.table/Table" name="clearSelection">
            <documentation>Removes complete selection.</documentation>
        </method>
        <method name="selectAll">
            <documentation>Add all rows to the selection.
Please note that for server based models like OData the indices which are considered to be selected might not
be available at the client yet. Calling getContextByIndex might not return a result but trigger a roundtrip
to request this single entity.</documentation>
        </method>
        <method name="getSelectedIndices">
            <documentation>Zero-based indices of selected items, wrapped in an array. An empty array means &quot;no selection&quot;.</documentation>
        </method>
        <method type="sap.ui.table/Table" name="addSelectionInterval">
            <documentation>Adds the given selection interval to the selection. In case of single selection the &quot;indexTo&quot; value will be used for as selected index.</documentation>
            <parameters>
                <parameter type="sap.ui.core/int" name="indexFrom">
                    <documentation>Index from which .</documentation>
                </parameter>
                <parameter type="sap.ui.core/int" name="indexTo">
                    <documentation>Indices of the items that shall additionally be selected.</documentation>
                </parameter>
            </parameters>
        </method>
        <method type="sap.ui.table/Table" name="setSelectionInterval">
            <documentation>Sets the given selection interval as selection. In case of single selection the &quot;indexTo&quot; value will be used for as selected index.</documentation>
            <parameters>
                <parameter type="sap.ui.core/int" name="indexFrom">
                    <documentation>Index from which .</documentation>
                </parameter>
                <parameter type="sap.ui.core/int" name="indexTo">
                    <documentation>Indices of the items that shall additionally be selected.</documentation>
                </parameter>
            </parameters>
        </method>
        <method type="sap.ui.table/Table" name="removeSelectionInterval">
            <documentation>Removes the given selection interval from the selection. In case of single selection this call removeSelectedIndex with the &quot;indexTo&quot; value.</documentation>
            <parameters>
                <parameter type="sap.ui.core/int" name="indexFrom">
                    <documentation>Index from which .</documentation>
                </parameter>
                <parameter type="sap.ui.core/int" name="indexTo">
                    <documentation>Indices of the items that shall additionally be selected.</documentation>
                </parameter>
            </parameters>
        </method>
        <method type="sap.ui.core/boolean" name="isIndexSelected">
            <documentation>Returns whether the given index is selected.</documentation>
            <parameters>
                <parameter type="sap.ui.core/int" name="index">
                    <documentation>Index which is checked for selection state.</documentation>
                </parameter>
            </parameters>
        </method>
    </methods>
</control>
